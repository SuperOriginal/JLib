package io.ibj.JLib.logging;

import io.ibj.JLib.logging.connection.Connection;
import io.ibj.JLib.logging.event.Event;
import io.ibj.JLib.logging.event.EventBuilder;
import io.ibj.JLib.logging.event.helper.EventBuilderHelper;
import io.ibj.JLib.logging.event.interfaces.ExceptionInterface;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

/**
 * Raven is a client for Sentry allowing to send an {@link io.ibj.JLib.logging.event.Event} that will be processed and sent to a Sentry server.
 * <p>
 * It is recommended to create an instance of Raven through
 * {@link io.ibj.JLib.logging.RavenFactory#createRavenInstance(io.ibj.JLib.logging.dsn.Dsn)}, this will use the best factory available to
 * create a sensible instance of Raven.
 * </p>
 */
public class Raven {
    /**
     * Version of this client, the major version is the current supported Sentry protocol, the minor version changes
     * for each release of this project.
     */
    public static final String NAME = "Raven-Java/5.0-24836";
    /**
     * Indicates whether the current thread is managed by raven or not.
     */
    private static final ThreadLocal<Boolean> RAVEN_THREAD = new ThreadLocal<Boolean>() {
        @Override
        protected Boolean initialValue() {
            return false;
        }
    };
    private static final Logger logger = LoggerFactory.getLogger(Raven.class);
    private final Set<EventBuilderHelper> builderHelpers = new HashSet<>();
    private Connection connection;

    /**
     * Sets the current thread as managed by Raven.
     * <p>
     * The logs generated by Threads managed by Raven will not send logs to Sentry.
     * </p>
     */
    public static void startManagingThread() {
        try {
            if (isManagingThread())
                logger.warn("Thread already managed by Raven");
        } finally {
            RAVEN_THREAD.set(true);
        }
    }

    /**
     * Sets the current thread as not managed by Raven.
     * <p>
     * The logs generated by Threads not managed by Raven will send logs to Sentry.
     * </p>
     */
    public static void stopManagingThread() {
        try {
            if (!isManagingThread()) {
                //Start managing the thread only to send the warning
                startManagingThread();
                logger.warn("Thread not yet managed by Raven");
            }
        } finally {
            RAVEN_THREAD.remove();
        }
    }

    /**
     * Checks whether the current thread is managed by Raven or not.
     *
     * @return {@code true} if the thread is managed by Raven, {@code false} otherwise.
     */
    public static boolean isManagingThread() {
        return RAVEN_THREAD.get();
    }

    /**
     * Runs the {@link io.ibj.JLib.logging.event.helper.EventBuilderHelper} against the {@link io.ibj.JLib.logging.event.EventBuilder} to obtain additional information with a
     * MDC-like system.
     *
     * @param eventBuilder event builder containing a not yet finished event.
     */
    public void runBuilderHelpers(EventBuilder eventBuilder) {
        for (EventBuilderHelper builderHelper : builderHelpers) {
            builderHelper.helpBuildingEvent(eventBuilder);
        }
    }

    /**
     * Sends a built {@link io.ibj.JLib.logging.event.Event} to the Sentry server.
     *
     * @param event event to send to Sentry.
     */
    public void sendEvent(Event event) {
        try {
            connection.send(event);
        } catch (Exception e) {
            logger.error("An exception occurred while sending the event to Sentry.", e);
        }
    }

    /**
     * Sends a message to the Sentry server.
     * <p>
     * The message will be logged at the {@link io.ibj.JLib.logging.event.Event.Level#INFO} level.
     * </p>
     *
     * @param message message to send to Sentry.
     */
    public void sendMessage(String message) {
        EventBuilder eventBuilder = new EventBuilder().setMessage(message)
                .setLevel(Event.Level.INFO);
        runBuilderHelpers(eventBuilder);
        sendEvent(eventBuilder.build());
    }

    /**
     * Sends an exception to the Sentry server.
     * <p>
     * The Exception will be logged at the {@link io.ibj.JLib.logging.event.Event.Level#ERROR} level.
     * </p>
     *
     * @param exception exception to send to Sentry.
     */
    public void sendException(Exception exception) {
        EventBuilder eventBuilder = new EventBuilder().setMessage(exception.getMessage())
                .setLevel(Event.Level.ERROR)
                .addSentryInterface(new ExceptionInterface(exception));
        runBuilderHelpers(eventBuilder);
        sendEvent(eventBuilder.build());
    }

    /**
     * Removes a builder helper.
     *
     * @param builderHelper builder helper to remove.
     */
    public void removeBuilderHelper(EventBuilderHelper builderHelper) {
        logger.info("Removes '{}' to the list of builder helpers.", builderHelper);
        builderHelpers.remove(builderHelper);
    }

    /**
     * Adds a builder helper.
     *
     * @param builderHelper builder helper to add.
     */
    public void addBuilderHelper(EventBuilderHelper builderHelper) {
        logger.info("Adding '{}' to the list of builder helpers.", builderHelper);
        builderHelpers.add(builderHelper);
    }

    public Set<EventBuilderHelper> getBuilderHelpers() {
        return Collections.unmodifiableSet(builderHelpers);
    }

    public Connection getConnection() {
        return connection;
    }

    public void setConnection(Connection connection) {
        this.connection = connection;
    }
}
